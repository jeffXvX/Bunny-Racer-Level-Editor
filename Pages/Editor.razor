@inject IJSRuntime JS
@using System.Text.RegularExpressions;

<PageTitle>Bunny Racer Level Editor</PageTitle>
<h1><img src="images/storeLogo.scale-400.png" />Bunny Racer Level Editor</h1>
<EditForm EditContext=@editContext OnInvalidSubmit=@InvalidSubmit OnValidSubmit=@DownloadFile>
	<h4>
		@if (timerlevel.Timer < 1)
			timerlevel.Timer = 1;
		@if (timerlevel.Timer > 9999)
			timerlevel.Timer = 9999;
		@if (timerlevel.Level < 1)
			timerlevel.Level = 1;
		@if (timerlevel.Level > 20)
			timerlevel.Level = 20;


		Timer (1-9999): <InputNumber @bind-Value="timerlevel.Timer" />
		Level (1-20): <InputNumber @bind-Value="timerlevel.Level" />
		<br />
		<br />
		Load from File: <InputFile OnChange="OnInputFileChanged"></InputFile>
		Save to File: <button type="submit">Download</button>
		<br />
		@saveError
		<br />
		@openError
		<br />
		<DataAnnotationsValidator />
	</h4>

</EditForm>

<h4>
	<br />
	Number of columns: (@columns.Count) <button @onclick="@(() => AddColumn(columns.Count, 27, 0))">Add</button>
</h4>

<style>
	.grid-container {
		display:grid;
		grid-template-columns: repeat(@columns.Count, 146px);
		grid-template-rows: 36px repeat(28, 18px) repeat(4, 36px);
		background-color: rgba(51,255,51,1);
		padding: 0px;
		grid-auto-flow: column dense;
		align-content: start;
		width: @(columns.Count*146 + "px");
	}

	.grid-menu-item{
		background-color: white;
		border: 0px;
		padding: 0px;
		text-align: center;
	}

	.grid-fill-item {
		background-color: rgba(51,255,51,1);
		border: 0px;
		padding: 0px;
		text-align: center;
	}



</style>

<div class="grid-container">
	@foreach (var column in columns)
	{

		if (column.InverseHeight < 0)
			column.InverseHeight = 0;

		if (column.InverseHeight > 28)
			column.InverseHeight = 28;

		column.Height = 28 - column.InverseHeight;

		<div class="grid-menu-item">
			<input type="number" min="0" max="28" @bind=@column.InverseHeight>
		</div>

		var x = 0;
		while (x < column.Height)
			{
				<div class="grid-fill-item"> </div>
				x++;	
			}

		<div class="grid-fill-item">
			<p>
					<img src=@("images/bunny" + column.PlatformType + ".png")>
				</p>
		</div>

		x++;

		while (x <= 28)
		{
			<div>  </div>
			x++;
		}


		<div class="grid-menu-item">
			<InputSelect @bind-Value=column.PlatformType>
				<option value=0>Empty</option>
				<option value=1>Green Block</option>
				<option value=2>Red Block</option>
				<option value=3>Yellow Block</option>
				<option value=4>Cyan Block</option>
				<option value=5>Purple Moving</option>
				<option value=6>Brown Moving</option>
				<option value=7>Red Line</option>
				<option value=8>Up Platform</option>
				<option value=9>Down Platform</option>
				<option value=10>Rainbow 9</option>
				<option value=11>Rainbow 8</option>
				<option value=12>Rainbow 7</option>
				<option value=13>Rainbow 6</option>
				<option value=14>Rainbow 5</option>
				<option value=15>Rainbow 4</option>
				<option value=16>Rainbow 3</option>
				<option value=17>Rainbow 2</option>
				<option value=18>Rainbow 1</option>

			</InputSelect>
		</div>
		
		<div class="grid-menu-item">
			<button @onclick="@(() => DeleteColumn(column.ColumnNumber))">Delete</button>
		</div>
		<div class="grid-menu-item">
			<button @onclick="@(() => InsertColumn(column.ColumnNumber, 27, 0))">Insert</button>
		</div>

	}


</div>



@code {
	private List<LevelColumn> columns = new();
	private List<LevelColumn> columns_backup = new();
	private List<IBrowserFile> loadedFiles = new();
	private string[]? rawLevelData;
	private int? columnsSpecified;
	private IEnumerable<string>? items;
	private string fileContent = "";
	private TimerLevel timerlevel = new(){Timer=500, Level=1};
	private EditContext? editContext;
	private string? outputString;
	private string? inputString;
	private const string NewLine = "\n";
	private string? saveError;
	private string? openError;
	private decimal decimalHeight;

	private void AddColumn(int newColumnNumber, int newHeight, int newPlatformType)
	{
		columns.Add(new LevelColumn { ColumnNumber = newColumnNumber, Height = newHeight, InverseHeight = 28 - newHeight, PlatformType = newPlatformType});
	}

	private void InsertColumn(int newColumnNumber, int newHeight, int newPlatformType)
	{
		columns.Insert(newColumnNumber, new LevelColumn { ColumnNumber = newColumnNumber, Height = newHeight, InverseHeight = 28 - newHeight, PlatformType = newPlatformType });
		for (int x = 0; x < columns.Count; x++)
		{
			columns[x].ColumnNumber = x;
		}

	}

	private void DeleteColumn(int deleteColumnNumber)
	{
		columns.RemoveAt(deleteColumnNumber);

		for (int x = 0; x < columns.Count; x ++)
		{
			columns[x].ColumnNumber = x;
		}
	}

	private void LoadInput()
	{
		if (outputString is not null)
		{
			try
			{
				inputString = Regex.Replace(outputString, "\r\n\r\n", string.Empty);
			}
			catch
			{
				openError = "Could not open file.";
				return;
			}

			if (inputString is not null)
				rawLevelData = inputString.Split('\n');

			try
			{
				if (rawLevelData is not null)
					columnsSpecified = Convert.ToInt32(rawLevelData[0]) - 2;
			}
			catch
			{
				openError = "Could not open file.";
				return;
			}

			try
			{
				if (rawLevelData is not null)
					timerlevel.Timer = Convert.ToInt32(rawLevelData[1]);
			}
			catch
			{
				openError = "Could not open file.";
				return;
			}
			if (rawLevelData is not null)
				items = rawLevelData.Skip(4);

			columns.Clear();

			if (items is not null)
				foreach (string item in items)
				{
					string[] values = item.Split(',');
					if (values[0] != "")
					{
						int TypeFromFile = Convert.ToInt32(values[0]);
						decimal DecHeightFromFile = Convert.ToDecimal(values[1]);
						int HeightFromFile = Convert.ToInt32(DecHeightFromFile*2);
						AddColumn(0,28-HeightFromFile, TypeFromFile);
					}
				}

		}


		for (int x = 0; x < columns.Count; x++)
		{
			columns[x].ColumnNumber = x;
		}

	}


	private async Task OnInputFileChanged(InputFileChangeEventArgs e)
	{
		var file = e.File;

		long maxsize = 512000;

		var buffer = new byte[file.Size];
		await file.OpenReadStream(maxsize).ReadAsync(buffer);
		fileContent = System.Text.Encoding.UTF8.GetString(buffer);

		outputString = fileContent;
		Match m = Regex.Match(file.Name, @"^L\d{1,2}$");
		if (m.Success)
		{
			if (Int32.TryParse(file.Name.Substring(1), out int j))
			{
				timerlevel.Level = j;
			}

			else timerlevel.Level = 1;
		}
		else timerlevel.Level = 1;
		openError = null;
		LoadInput();
	}

	private void InvalidSubmit()
	{
		saveError = "Could not save. Please fix any errors and try again.";
	}

	protected override void OnInitialized()
	{
		editContext = new(timerlevel);
	}

	public async void DownloadFile()
	{
		saveError = null;
		outputString = $"{(columns.Count + 2)}{NewLine}{timerlevel.Timer}{NewLine}0,0{NewLine}0,0{NewLine}";
		foreach (var column in columns)
		{
			decimalHeight = Decimal.Divide(28-column.Height, 2);
			outputString += $"{column.PlatformType},{decimalHeight}{NewLine}";
		}
		outputString += $"{NewLine}{NewLine}";

		await JS.InvokeAsync<object>(
			"FileSaveAs",
			"L" + timerlevel.Level,
			outputString
		);
	}

	

}
